#!/bin/sh -e

SED=${SED:-sed}
DOCKER=${DOCKER:-docker}
CURL=${CURL:-curl}
SHA256SUM=${SHA256SUM:-sha256sum}

log() {
    echo '#' $@
}

cmd() {
    echo '$' $@
    $@
}

help_message() {
    local bold=$(tput bold) normal=$(tput sgr0)
    cat <<EOF
${bold}NAME${normal}
        bootstrap - install requirements
${bold}SYNOPSYS${normal}
        ${bold}bootstrap${normal} [OPTIONS]
${bold}DESCRIPTION${normal}
        ${bold}-u --bbpcode-ssh-user${normal}
           Specifies the SSH user to access private repositories
           hosted at bbpcode.epfl.ch
           Default is "$BBPCODE_SSH_USER"

        ${bold}-s --ssh-key${normal}
            Specifies the SSH key to access both 
            bbpcode.epfl.ch and github.com private Git repositories
            Default is ~/.ssh/id_rsa

        ${bold}-o --docker-organization${normal}
            Specifies Docker organization where build images are sent
            Default is "$DOCKER_ORG"

        ${bold}--nix-channel-url${normal}
            Specifies link to NIX BBP channel.
            Default is "$NIX_CHANNEL_URL"

        ${bold}-t|--pkg-docker-tag${normal}
            Specifies tag of Docker images built by 
            pkg.<expr> make targets. Default is "$PKG_DTAG"

        ${bold}-h --help${normal}
                Display this message and exit.
${bold}ENVIRONMENT${normal}
        You can specify path to executables used by this script
        via environment variables if not in ${bold}PATH${normal}

        ${bold}CURL${normal}
        ${bold}DOCKER${normal}
        ${bold}SED${normal}
        ${bold}SHA256SUM${normal}
EOF
}

parse_cli() {
    while [ "x$1" != x ] ; do
        case "$1" in
            -u|--user)
                shift
                BBPCODE_SSH_USER="$1"
                ;;
            -o|--docker-org)
                shift
                DOCKER_ORG="$1"
                ;;
            --nix-channel-url)
                shift
                NIX_CHANNEL_URL="$1"
                if [ "$NIX_CHANNEL_URL" = "local" ] ; then
                    LOCAL_CHANNEL=http://`$CURL -4 icanhazip.com 2>/dev/null`/channels/bbp-pkgs-unstable
                    NIX_CHANNEL_URL="$LOCAL_CHANNEL"
                fi
                ;;
            -s|--bbpcode-ssh-user)
                shift
                SSH_KEY="$1"
                ;;
            -t|--pkg-docker-tag)
                shift
                PKG_DTAG="$1"
                ;;
            -h|--help)
                help_message
                exit 0
                ;;
            *)
                echo "Unknown option: $1. Abort."
                exit 1
                ;;
        esac
        shift
    done
}

check_docker() {
    log "Checking Docker version"
    docker_experimental=`$DOCKER version --format '{{.Server.Experimental}}'`
    if [ x$docker_experimental != xtrue ] ;then
        echo "Docker experimental mode does not seem to be enabled. Abort" >&2
        exit 1
    fi
}

download_mpich() {
    MPICH2_VERSION=3.1.4
    log "Downloading MPICH $MPICH2_VERSION"
    MPICH_TGZ=mpich-${MPICH2_VERSION}.tar.gz
    MPICH_TGZ_SHA256=f68b5330e94306c00ca5a1c0e8e275c7f53517d01d6c524d51ce9359d240466b
    MPICH_URL=http://www.mpich.org/static/downloads/${MPICH2_VERSION}/${MPICH_TGZ}

    while true ; do
        if ! [ -f "build/$MPICH_TGZ" ] ; then
            echo "Downloading MPICH"
            (cd build ; "$CURL" -O "$MPICH_URL")
        fi
        if ! echo "$MPICH_TGZ_SHA256 build/$MPICH_TGZ" | sha256sum -c - >/dev/null; then
            echo "Bad SHA256 for build/$MPICH_TGZ. Restarting download"
            rm -f "build/$MPICH_TGZ"
        else
            break
        fi
    done
}

SSH_KEY=~/.ssh/id_rsa
NIX_CHANNEL_URL=https://bbpobjectstorage.epfl.ch/nix-channel
DOCKER_ORG=bluebrain
BBPCODE_SSH_USER=$USER
PKG_DTAG=latest

parse_cli $@
check_docker
download_mpich

log "Copying SSH key: $SSH_KEY"
install -m 400 "$SSH_KEY" build/files/ssh/id_rsa

log "Writing env.mk"
cat <<EOF > env.mk
SSH_KEY = "$SSH_KEY"
NIX_CHANNEL_URL = "$NIX_CHANNEL_URL"
DOCKER_ORG = "$DOCKER_ORG"
BBPCODE_SSH_USER = "$USER"
PKG_DTAG ?= "$PKG_DTAG"
MPICH2_VERSION = "$MPICH2_VERSION"
EOF
